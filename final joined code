import requests
import json
from urllib.parse import quote
import pandas as pd

def flatten_json(data, prefix=''):
    flattened_data = {}
    if isinstance(data, dict):
        for key, value in data.items():
            new_key = f"{prefix}.{key}" if prefix else key
            flattened_data.update(flatten_json(value, new_key))
    elif isinstance(data, list):
        for index, item in enumerate(data):
            new_key = f"{prefix}.{index}" if prefix else str(index)
            flattened_data.update(flatten_json(item, new_key))
    else:
        flattened_data[prefix] = data
    return flattened_data

def build_json_response(flattened_data):
    json_response = {}
    for key, value in flattened_data.items():
        nested_keys = key.split('.')
        current_dict = json_response
        for nested_key in nested_keys[:-1]:
            if nested_key not in current_dict:
                current_dict[nested_key] = {}
            current_dict = current_dict[nested_key]
        
        if nested_keys[-1] == "contents":
            value = json.loads(value)
        
        current_dict[nested_keys[-1]] = value
    return json_response

def extract_field_values(data, field_names):
    extracted_values = {}
    for key, value in data.items():
        if isinstance(value, dict):
            extracted_values.update(extract_field_values(value, field_names))
        elif not field_names or key in field_names:
            extracted_values[key] = value
    return extracted_values

def call_api_with_bearer_token(url, access_token, sso_token, request_body=None, where_conditions=None, field_names=None):
    headers = {
        'Authorization': f'Bearer {sso_token}',
        'Content-Type': 'application/json'
    }

    try:
        if request_body:
            headers['accessToken'] = access_token
            response = requests.post(url, json=request_body, headers=headers)
        elif where_conditions:
            where_encoded = quote(where_conditions, safe='&')
            query_string = f"where={where_encoded}&accessToken={access_token}"
            response = requests.get(f"{url}?{query_string}", headers=headers)
        else:
            print("Invalid API call. Please provide either request body or where conditions.")
            return None

        response.raise_for_status()  # Raise an exception for any error status code

        json_data = response.json()
        flattened_data = flatten_json(json_data)
        json_response = build_json_response(flattened_data)

        extracted_data = []
        for record in json_response.values():
            field_values = extract_field_values(record, field_names)
            if field_values:
                extracted_data.append(field_values)

        return extracted_data

    except requests.exceptions.RequestException as e:
        print(f"Error occurred: {e}")
    except json.decoder.JSONDecodeError as e:
        print(f"Error decoding JSON response: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")
    
    return None

# First API - Using request body and pagination
url1 = "http://lonrs14597.fm.rbsgrp.net:36124/ignite/trade/regulatory/mas/trade/query"
request_body1 = {
    "select": "",
    "orderBy": None,
    "where": "(lifetimeFrom >= '2023-04-05T00:00:00.000Z') AND sourceSystemId = 'GlobalFX GBLO'",
    "maxResults": 100,
    "offset": 0
}

# Second API - Using where conditions
url2 = "http://datafabric-tst:40003/datafabric/Tntr-prodprl/TNTR-trade-prodprl"
where_conditions2 = "subjectIdentifier.regulatoryRegimeIdentifier.regulatoryAuthority = 'The Monetary Authority of Singapore' and subjectIdentifier.sourceSystem = 'GlobalFX GBLO' and _df.lifetimeFrom >'2023-04-05T00:00:00.000Z'"
field_names2 = []  # Add the field names you want to extract, or leave it empty for all fields

access_token = "b0013b54-b771-43f7-b2e0-a86b51fd92aa"
sso_token = "OBO4sgorgOxt0ozarIzA9nf63aU6n5fkhDDUtfW9euQl4r/+syzFBkMCsMK8aAKNlR0Jcw670dYS7H8vTWCpEIgsCIrLsBlzqjUWNKXnmxEP+kjzcZ/cKF/mxi/9G6d2sgVNMWbdezIlKbcG50jKxPT6yFZw+xaTxQfwvQB3x44=|0|jainnbr|TNTR-User|20230621193209|18000|"

# Make API calls and save data into DataFrames
data1 = call_api_with_bearer_token(url1, access_token, sso_token, request_body=request_body1)
df1 = pd.DataFrame(data1)

data2 = call_api_with_bearer_token(url2, access_token, sso_token, where_conditions=where_conditions2, field_names=field_names2)
df2 = pd.DataFrame(data2)

# Display the DataFrames
print("DataFrame 1:")
print(df1)

print("DataFrame 2:")
print(df2)
