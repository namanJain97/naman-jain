import requests
import json
from urllib.parse import quote

def flatten_json(data, prefix=''):
    flattened_data = {}
    if isinstance(data, dict):
        for key, value in data.items():
            new_key = f"{prefix}.{key}" if prefix else key
            flattened_data.update(flatten_json(value, new_key))
    elif isinstance(data, list):
        for index, item in enumerate(data):
            new_key = f"{prefix}.{index}" if prefix else str(index)
            flattened_data.update(flatten_json(item, new_key))
    else:
        flattened_data[prefix] = data
    return flattened_data

def build_json_response(flattened_data):
    json_response = {}
    for key, value in flattened_data.items():
        nested_keys = key.split('.')
        current_dict = json_response
        for nested_key in nested_keys[:-1]:
            if nested_key not in current_dict:
                current_dict[nested_key] = {}
            current_dict = current_dict[nested_key]
            
        if nested_keys[-1] == "contents":
            value = json.loads(value)
            
        current_dict[nested_keys[-1]] = value
    return json_response

def call_api_with_bearer_token(access_token, sso_token, where_conditions):
    api_url = "http://datafabric-tst:40003/datafabric/Tntr/TNTR-reconciliation-uat"

    where_encoded = quote(where_conditions, safe='&')
    query_string = f"where={where_encoded}&accessToken={access_token}"

    headers = {
        'Authorization': f'Bearer {sso_token}',
        'Content-Type': 'application/json'
    }

    response = requests.get(f"{api_url}?{query_string}", headers=headers)

    try:
        response.raise_for_status()  # raise an exception for 4xx and 5xx status codes
        json_data = response.json()
        flattened_data = flatten_json(json_data)
        json_response = build_json_response(flattened_data)
        print(json.dumps(json_response, indent=4))
    except requests.exceptions.HTTPError as e:
        print(f"HTTP error occurred: {e}")
    except json.decoder.JSONDecodeError as e:
        print(f"Error decoding JSON response: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")

access_token = "b0013b54-b771-43f7-b2e0-a86b51fd92aa"
where_conditions = "subjectIdentifier.reconciliationRuleIdentifier='EmirPositionCredit'&reconciliationBusinessDateTime='2022-02-03T00:00:00.000Z'"
sso_token = "hqy0jUZpQ7WHgSJFk3qkkb8/fv5PeWiawXTLS7ocSMuUtd0+Y8sxp2Of+XDLna2wk8BCCV2Dg5glEjdC5R/QY4TCdDKGh7eeMbB2Ta0Yjuecic1rXx+Q3Hn216CzHiW9Ief2xCpqo5gRFbqJeR5MQakY70NI+1POATeG6YmKvAk=|0|jainnbr|TNTR-User|20230619090441|18000|"

call_api_with_bearer_token(access_token, sso_token, where_conditions)
